openapi: 3.0.0
info:
  title: Bookstore API
  description: A RESTful API for managing an online bookstore
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local development server

components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
        last_name:
          type: string
        bio:
          type: string
      required:
        - first_name
        - last_name
        - bio

    Book:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        genres:
          type: array
          items:
            type: string
        published_at:
          type: string
          format: date-time
        price:
          type: number
          format: float
        stock:
          type: integer
      required:
        - title
        - author
        - genres
        - published_at
        - price
        - stock

    Address:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        postal_code:
          type: string
        country:
          type: string
      required:
        - street
        - city
        - state
        - postal_code
        - country

    Customer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        email:
          type: string
          format: email
        address:
          $ref: '#/components/schemas/Address'
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - name
        - email
        - address

    OrderItem:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/Book'
        quantity:
          type: integer
          minimum: 1
      required:
        - book
        - quantity

    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        customer:
          $ref: '#/components/schemas/Customer'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        total_price:
          type: number
          format: float
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - customer
        - items

    Report:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        start_period:
          type: string
          format: date-time
        end_period:
          type: string
          format: date-time
        generated_at:
          type: string
          format: date-time
        total_revenue:
          type: number
          format: float
        total_orders:
          type: integer
        top_books:
          type: array
          items:
            $ref: '#/components/schemas/BookSales'

    BookSales:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/Book'
        quantity_sold:
          type: integer
        revenue:
          type: number
          format: float

    Error:
      type: object
      properties:
        error:
          type: string

paths:
  /books:
    get:
      summary: Search books
      parameters:
        - in: query
          name: title
          schema:
            type: string
        - in: query
          name: author
          schema:
            type: string
        - in: query
          name: genres
          schema:
            type: string
        - in: query
          name: min_price
          schema:
            type: number
        - in: query
          name: max_price
          schema:
            type: number
        - in: query
          name: in_stock
          schema:
            type: boolean
      responses:
        '200':
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input

  /books/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          
    get:
      summary: Get a book by ID
      responses:
        '200':
          description: Book found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    
    put:
      summary: Update a book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated
        '404':
          description: Book not found
    
    delete:
      summary: Delete a book
      responses:
        '200':
          description: Book deleted
        '404':
          description: Book not found

  /authors:
    get:
      summary: List all authors
      responses:
        '200':
          description: List of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    
    post:
      summary: Create a new author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'

  /authors/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    
    get:
      summary: Get an author by ID
      responses:
        '200':
          description: Author found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    
    put:
      summary: Update an author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Author updated
    
    delete:
      summary: Delete an author
      responses:
        '200':
          description: Author deleted
        '400':
          description: Cannot delete author with books

  /customers:
    post:
      summary: Create a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customer created

  /customers/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    
    get:
      summary: Get a customer
      responses:
        '200':
          description: Customer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    
    put:
      summary: Update a customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer updated
    
    delete:
      summary: Delete a customer
      responses:
        '200':
          description: Customer deleted
        '400':
          description: Cannot delete customer with orders

  /orders:
    get:
      summary: List all orders
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    
    post:
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created
        '400':
          description: Invalid input or insufficient stock

  /orders/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    
    get:
      summary: Get an order
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    
    delete:
      summary: Delete an order
      responses:
        '200':
          description: Order deleted

  /reports:
    get:
      summary: List all reports
      parameters:
        - in: query
          name: start_date
          schema:
            type: string
            format: date
        - in: query
          name: end_date
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of reports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'

  /reports/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    
    get:
      summary: Get a specific report
      responses:
        '200':
          description: Report found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '404':
          description: Report not found